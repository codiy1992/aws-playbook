---
AWSTemplateFormatVersion: '2010-09-09'
Description: lambda

Parameters:
  S3BucketName:
    Type: String
    Description: S3 Bucket Name

  S3ObjectKey:
    Type: String
    Description: S3 Object Key

  S3ObjectVersion:
    Type: String
    Description: S3 Object Version

  AlarmSNSStackName:
     Type: String
     Default: {{ alarm_sns_stack_name }}
     Description: alarm sns stack name

Resources:
  LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join
                    - '-'
                    - - 'LambdaRole'
                      - !Sub '${AWS::Region}'
                      - {{ lambda_name }}
        AssumeRolePolicyDocument:
          Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
          Version: '2012-10-17'
        Policies:
        - PolicyDocument:
            Statement:
            - Action:
               - 'logs:CreateLogGroup'
               - 'logs:CreateLogStream'
               - 'logs:PutLogEvents'
               - 'logs:GetLogEvents'
               - 'logs:DescribeLogStreams'
              Effect: Allow
              Resource: "arn:aws:logs:*:*:*"
            Version: '2012-10-17'
          PolicyName: LambdaExecutionPolicy

  LambdaFunction:
     Type: AWS::Lambda::Function
     DependsOn: LambdaExecutionRole
     Properties:
       FunctionName: {{ lambda_name }}
       Handler: index.handler
       Role:
         Fn::GetAtt: [LambdaExecutionRole, Arn]
       Code:
         S3Bucket: !Ref 'S3BucketName'
         S3Key: !Ref 'S3ObjectKey'
         S3ObjectVersion: !Ref 'S3ObjectVersion'
       Runtime: {{ lambda_language }}
       MemorySize: 128
       Timeout: 3
       Environment:
         Variables:
           DING_TOKEN: '{{ dingtalk_token }}'
           REGION: !Ref AWS::Region

  LambdaFunctionVersion:
    Type: "AWS::Lambda::Version"
    Properties:
      FunctionName: !Ref 'LambdaFunction'
      Description: "A version of {{ lambda_name }}"

  LambdaPermissionForSNSInvokation:
     Type: AWS::Lambda::Permission
     DependsOn: LambdaFunction
     Properties:
      Action: lambda:InvokeFunction
      SourceArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'AlarmSNSStackName', 'AlarmSNSArn']]
      FunctionName:
        Fn::GetAtt: [LambdaFunction, Arn]
      Principal: "sns.amazonaws.com"

